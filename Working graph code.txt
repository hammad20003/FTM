#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <ESP32Servo.h>

// Wi-Fi Credentials
const char* ssid = "hadi";       // üîÅ Change to your Wi-Fi name
const char* password = "12345678";   // üîÅ Change to your Wi-Fi password

WebServer server(80);
WebSocketsServer webSocket = WebSocketsServer(81);

Servo servo;
const int SERVO_PIN = 13;

// Test parameters
const float DEGREE_TO_DISPLACEMENT = 0.0216;  // cm/degree
const float SPRING_CONSTANT = 150.0;          // simulated stiffness
int angle = 0;
bool testRunning = false;
unsigned long lastStepTime = 0;

void sendSimulatedData() {
  float displacement = angle * DEGREE_TO_DISPLACEMENT;
  float force = SPRING_CONSTANT * displacement * displacement;
  force += random(-20, 20); // noise

  String message = String(displacement, 4) + "," + String(force, 2);
  webSocket.broadcastTXT(message);
}

void handleRoot() {
  server.send_P(200, "text/html", R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>Flexural Test Live</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <h2>Flexural Test - Force vs Displacement</h2>
  <canvas id="myChart" width="400" height="200"></canvas>
  <script>
    const ctx = document.getElementById('myChart').getContext('2d');
    const data = {
      labels: [],
      datasets: [{
        label: 'Force (g)',
        data: [],
        borderColor: 'orange',
        fill: false
      }]
    };

    const config = {
      type: 'line',
      data: data,
      options: {
        animation: false,
        scales: {
          x: { title: { display: true, text: 'Displacement (cm)' }},
          y: { title: { display: true, text: 'Force (g)' }}
        }
      }
    };

    const chart = new Chart(ctx, config);

    let ws = new WebSocket("ws://" + location.hostname + ":81/");

    ws.onmessage = (event) => {
      const [disp, force] = event.data.split(",");
      data.labels.push(parseFloat(disp));
      data.datasets[0].data.push(parseFloat(force));
      chart.update();
    };
  </script>
</body>
</html>
)rawliteral");
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected");
  Serial.print("ESP32 IP Address: ");
  Serial.println(WiFi.localIP());  // ‚úÖ Now prints IP

  // Setup server
  server.on("/", handleRoot);
  server.begin();

  // Setup WebSocket
  webSocket.begin();
  webSocket.onEvent([](uint8_t, WStype_t, uint8_t*, size_t) {});

  // Setup servo
  servo.attach(SERVO_PIN);
  servo.write(0);

  // Start test loop
  testRunning = true;
  lastStepTime = millis();
}

void loop() {
  server.handleClient();
  webSocket.loop();

  // Run test step-by-step
  if (testRunning && millis() - lastStepTime > 300) {
    if (angle <= 60) {
      servo.write(angle);
      sendSimulatedData();
      angle++;
      lastStepTime = millis();
    } else {
      testRunning = false;
    }
  }
}
