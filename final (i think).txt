#include <WiFi.h>
#include <WebServer.h>
#include <WiFiManager.h>
#include <ESPmDNS.h>
#include "HX711.h"
#include <ESP32Servo.h> // Required for servo control

// --- Load cell pins and calibration ---
#define DT 3
#define SCK 2
HX711 scale;
float calibration_factor = -475.31;

// --- Web server setup ---
WebServer server(80);
bool mDNSStarted = false;

// --- Physical Reset Button ---
#define RESET_BUTTON_PIN 4
unsigned long buttonPressTime = 0;
bool buttonPressed = false;

// For storing readings history
String forceHistory = "";
int readingCounter = 0; // Global counter for force readings

// --- Stepper Motor Pin Definitions ---
const int STEP_PIN = 19;
const int DIR_PIN = 18;
const int ENABLE_PIN = 5; // ENA- on TB6600

// --- Stepper Motion Parameters ---
const int stepsPerRevolution = 400;           // 400 steps per full rotation (half-step mode)
float distancePerStep = 9.11 / 400.0;         // ~0.02278 cm per step (based on 2.9 cm wheel)

// --- Servo Motor Definitions ---
#define SERVO_PIN 7 // IMPORTANT: Defined as 7 as per your request
Servo myServo;
// Define angles for servo operation (adjust these based on your setup)
const int SERVO_RETRACT_ANGLE = 0;   // Angle where servo is retracted (not pushing)
const int SERVO_APPLY_PRESSURE_ANGLE = 90; // Example: Angle where servo pushes load cell

// --- Stepper Control Functions ---
void moveStepper(float cmToMove) {
  int direction = (cmToMove >= 0) ? LOW : HIGH;
  digitalWrite(DIR_PIN, direction);

  long steps = abs(cmToMove) / distancePerStep;
  Serial.print("Moving stepper ");
  Serial.print(cmToMove);
  Serial.print(" cm (");
  Serial.print(steps);
  Serial.println(" steps)");

  digitalWrite(ENABLE_PIN, HIGH);
  delay(10);

  for (long i = 0; i < steps; i++) {
    digitalWrite(STEP_PIN, HIGH);
    delayMicroseconds(500);
    digitalWrite(STEP_PIN, LOW);
    delayMicroseconds(500);
  }

  digitalWrite(ENABLE_PIN, LOW);
  Serial.println("Stepper motor move complete. Motor disabled.");
}

// Function to move the tube only, no measurement
void moveTubeOnly(float distance) {
  moveStepper(distance);
  Serial.println("Tube moved. Ready for next action.");
}

// Function to send a single current force data reading using HX711
void sendCurrentForce() {
  if (scale.is_ready()) {
    float grams = scale.get_units(10);
    float newtons = grams * 0.00980665;

    readingCounter++;
    forceHistory += String(readingCounter) + ": " + String(newtons, 3) + " N\n";
    Serial.println("Measured Force: " + String(newtons, 3) + " N");
  } else {
    Serial.println("HX711 not ready.");
    readingCounter++;
    forceHistory += String(readingCounter) + ": HX711 not ready\n";
  }
}

// Function to move the servo to a specific angle
void moveServo(int angle) {
  Serial.print("Moving servo to ");
  Serial.print(angle);
  Serial.println(" degrees.");
  myServo.write(angle);
  delay(1000); // Allow time for servo to reach position and stabilize
}

// HTML content stored in PROGMEM (Flash Memory)
const char INDEX_HTML[] PROGMEM = R"---HTML---(
<!DOCTYPE html>
<html>
<head>
    <title>ESP32 Tube Pressure Tester</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <style>
        body { font-family: sans-serif; background:#f0f2f5; padding:20px; text-align:center; color:#333; display: flex; flex-direction: column; min-height: 100vh; }
        .main-layout { display: grid; grid-template-columns: 1fr 2fr 1fr; grid-template-rows: auto auto auto; gap: 20px; flex-grow: 1; max-width: 950px; margin: 0 auto; padding-bottom: 20px; }
        .grid-area { padding: 15px; border-radius: 10px; background: #fff; box-shadow: 0 4px 10px rgba(0,0,0,0.05); }
        .left-column { grid-column: 1 / 2; grid-row: 1 / 2; display: flex; flex-direction: column; gap: 10px; align-items: flex-start; }
        .center-data-display { grid-column: 2 / 3; grid-row: 1 / 3; display: flex; flex-direction: column; justify-content: flex-start; align-items: center; text-align: center; }
        /* right-column now covers two grid rows to accommodate more controls */
        .right-column { grid-column: 3 / 4; grid-row: 1 / 3; display: flex; flex-direction: column; gap: 10px; align-items: center; }
        .system-reset-area { grid-column: 1 / 4; grid-row: 3 / 4; display: flex; justify-content: center; gap: 10px; margin-top: 10px;}

        h2, h3 { color: #222; margin-bottom: 15px; }
        button { padding:12px 25px; border:none; border-radius:6px; background:#007bff; color:white; font-size:16px; cursor:pointer; transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease; box-shadow: 0 2px 4px rgba(0,0,0,0.1); width: 100%; max-width: 200px; }
        button:hover { background:#0056b3; transform: translateY(-1px); box-shadow: 0 4px 8px rgba(0,0,0,0.2); }
        .circular-button { width: 80px; height: 80px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 1.2em; font-weight: bold; border: 2px solid #fff; flex-shrink: 0; }
        pre { background:#e9ecef; padding:15px; border-radius:8px; width: 100%; max-width:350px; margin:20px auto 0 auto; text-align:left; white-space: pre-wrap; word-wrap: break-word; font-size: 0.9em; line-height: 1.6; color: #444; border: 1px solid #dee2e6; overflow-y: auto; max-height: 250px; }
        select { padding:10px; border-radius:6px; border:1px solid #ccc; width: calc(100% - 22px); max-width: 178px; font-size:16px;}
        p { font-size: 0.9em; color: #555; margin-bottom: 10px; }
        .footer { margin-top: auto; padding-top: 20px; border-top: 1px solid #eee; width: 100%; }
    </style>
</head>
<body>
    <h2>ESP32 Tube Pressure Tester</h2>

    <div class='main-layout'>

        <div class='left-column grid-area'>
            <h3>Tube Positioning</h3>
            <button onclick='moveStepperJs(10)'>Move 10cm</button>
            <button onclick='moveStepperJs(30)'>Move 30cm</button>
            <button onclick='moveStepperJs(60)'>Move 60cm</button>

            <select id='presetDistanceSelect'>
                <option value=''>Select distance</option>
                <option value='5'>5 cm</option>
                <option value='15'>15 cm</option>
                <option value='25'>25 cm</option>
                <option value='40'>40 cm</option>
                <option value='50'>50 cm</option>
                <option value='70'>70 cm</option>
                <option value='80'>80 cm</option>
                <option value='90'>90 cm</option>
            </select>
            <button onclick='moveStepperPresetJs()'>Move Selected cm</button>
        </div>

        <div class='center-data-display grid-area'>
            <h3>Force Readings History</h3>
            <pre id='forceHistoryDisplay'></pre>
        </div>

        <div class='right-column grid-area'>
            <h3>Force Actions</h3>
            <button class='circular-button' style='background:#ffc107;color:#000;' onclick='resetForceData()'>Reset Force</button>
            <button style='background:#28a745;' onclick='measureCurrentForce()'>Measure current force</button>

            <h3>Arm Controls</h3>
            <select id='servoAngleSelect'>
                <option value=''>Select Angle</option>
                <option value='5'>5 deg</option>
                <option value='10'>10 deg</option>
                <option value='15'>15 deg</option>
                <option value='20'>20 deg</option>
                <option value='25'>25 deg</option>
                <option value='30'>30 deg</option>
                <option value='35'>35 deg</option>
                <option value='40'>40 deg</option>
                <option value='45'>45 deg</option>
                <option value='50'>50 deg</option>
                <option value='55'>55 deg</option>
                <option value='60'>60 deg</option>
            </select>
            <button style='background:#6c757d;' onclick='moveServoPresetJs()'>Move Arm</button>
            <button style='background:#17a2b8; margin-top: 5px;' onclick='resetServoJs()'>RESET Arm (0 deg)</button>
        </div>

        <div class='system-reset-area grid-area'>
            <button style='background:#f44336;' onclick='wifiReset()'>WIFI reset</button>
        </div>

    </div>

    <div class='footer'><p>Access URL: <strong>(Will show current IP/mDNS name after connect)</strong></p></div>

    <script>
        // Function to handle fixed stepper move buttons via Fetch API (no page reload)
        function moveStepperJs(distance) {
            console.log('Attempting to move stepper ' + distance + 'cm');
            fetch('/move' + distance + 'cm_only')
                .then(response => {
                    if (!response.ok) {
                        console.error('Failed to move stepper ' + distance + 'cm');
                    }
                    console.log('Stepper move command sent for ' + distance + 'cm');
                })
                .catch(error => console.error('Network error during stepper move:', error));
        }

        // Function to handle preset stepper move button via Fetch API
        function moveStepperPresetJs() {
            const selectElement = document.getElementById('presetDistanceSelect');
            const distance = parseFloat(selectElement.value);
            if (isNaN(distance) || distance <= 0) {
                alert('Please select a valid distance from the dropdown.');
                return;
            }
            console.log('Attempting to move stepper ' + distance + 'cm (preset)');
            fetch('/move_custom_cm_only?distance=' + distance) // Reusing existing endpoint
                .then(response => {
                    if (!response.ok) {
                        console.error('Failed to move stepper ' + distance + 'cm (preset)');
                    }
                    console.log('Preset stepper move command sent for ' + distance + 'cm');
                    selectElement.value = ''; // Reset dropdown after sending
                })
                .catch(error => console.error('Network error during preset stepper move:', error));
        }

        // Function to fetch and update force history
        function updateForceHistory() {
            fetch('/get_history')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('forceHistoryDisplay').innerText = data;
                })
                .catch(error => console.error('Error fetching force history:', error));
        }

        // Function to handle Reset Force data via Fetch API
        function resetForceData() {
            console.log('Resetting force data...');
            fetch('/reset_force_data')
                .then(response => {
                    if (response.ok) {
                        console.log('Force data reset command sent.');
                        updateForceHistory(); // Immediately clear history display
                    } else {
                        console.error('Failed to reset force data.');
                    }
                })
                .catch(error => console.error('Network error during force reset:', error));
        }

        // Function to handle Measure current force via Fetch API
        function measureCurrentForce() {
            console.log('Measuring current force...');
            fetch('/read_force')
                .then(response => {
                    if (response.ok) {
                        console.log('Measure force command sent.');
                    } else {
                        console.error('Failed to measure force.');
                    }
                })
                .catch(error => console.error('Network error during force measurement:', error));
        }

        // Function to handle Preset Servo moves via Fetch API (uses new generic endpoint)
        function moveServoPresetJs() {
            const selectElement = document.getElementById('servoAngleSelect');
            const angle = parseInt(selectElement.value);
            if (isNaN(angle) || angle < 0 || angle > 180) { // Basic validation for servo angle
                alert('Please select a valid angle from the dropdown (0-180 degrees).');
                return;
            }
            console.log('Attempting to move servo to ' + angle + ' degrees (preset)');
            fetch('/move_servo?angle=' + angle) // NEW generic endpoint
                .then(response => {
                    if (!response.ok) {
                        console.error('Failed to move servo to ' + angle + ' degrees.');
                    }
                    console.log('Servo move command sent for ' + angle + ' degrees.');
                    selectElement.value = ''; // Reset dropdown after sending
                })
                .catch(error => console.error('Network error during servo move:', error));
        }
        
        // UPDATED: Function to handle Servo reset (0 degrees) via Fetch API
        function resetServoJs() {
            console.log('Resetting servo to 0 degrees...');
            fetch('/move_servo?angle=0') // Use the generic move_servo endpoint for 0 degrees
                .then(response => {
                    if (!response.ok) {
                        console.error('Failed to reset servo.');
                    }
                    console.log('Servo reset command sent (0 degrees).');
                })
                .catch(error => console.error('Network error during servo reset:', error));
        }


        // Function to handle Wi-Fi reset via Fetch API
        function wifiReset() {
            if (confirm('Are you sure you want to reset Wi-Fi settings and reboot the ESP32? This will disconnect you.')) {
                console.log('Initiating Wi-Fi reset and reboot...');
                fetch('/reset')
                    .then(response => {
                        console.log('Wi-Fi reset command sent. ESP32 should reboot shortly.');
                    })
                    .catch(error => console.error('Network error during Wi-Fi reset (expected if rebooting):', error));
            }
        }

        // Update history initially and then every 2 seconds
        document.addEventListener('DOMContentLoaded', () => {
            updateForceHistory();
            setInterval(updateForceHistory, 2000); // Update every 2 seconds
        });
    </script>
</body>
</html>
)---HTML---";


void setup() {
  Serial.begin(115200);
  Serial.println("\n--- ESP32 Load Cell & Stepper Setup ---");

  // Load cell setup
  scale.begin(DT, SCK);
  scale.set_scale(calibration_factor);
  scale.tare();
  Serial.println("Scale ready. Place your weight.");

  // Stepper Motor Setup
  pinMode(STEP_PIN, OUTPUT);
  pinMode(DIR_PIN, OUTPUT);
  pinMode(ENABLE_PIN, OUTPUT);
  digitalWrite(ENABLE_PIN, LOW);
  Serial.println("Stepper Motor Initialized.");

  // Servo Setup
  myServo.attach(SERVO_PIN);
  myServo.write(SERVO_RETRACT_ANGLE);
  Serial.println("Servo Motor Initialized.");

  // Reset button
  pinMode(RESET_BUTTON_PIN, INPUT_PULLUP);

  WiFiManager wm;
  wm.setConfigPortalTimeout(40);
  bool connectedToRouter = wm.autoConnect("ESP32-Setup", "12345678");

  if (connectedToRouter) {
    Serial.println("✅ Connected to Wi-Fi!");
    Serial.print("Local IP: ");
    Serial.println(WiFi.localIP());

    if (MDNS.begin("esp32-FTM")) {
      Serial.println("🌐 mDNS responder started at http://esp32-FTM.local");
      mDNSStarted = true;
    } else {
      Serial.println("❌ mDNS failed");
    }
  } else {
    Serial.println("❌ Wi-Fi failed. Starting fallback AP...");
    WiFi.softAPdisconnect(true);
    delay(100);
    WiFi.mode(WIFI_AP);
    WiFi.softAP("ESP32-DirectConnect", "12345678");
    Serial.print("AP IP: ");
    Serial.println(WiFi.softAPIP());
  }

  // --- Web Server Endpoints ---

  // Serve the main page from PROGMEM
  server.on("/", []() {
    server.send_P(200, "text/html", INDEX_HTML);
  });

  // Endpoint to get the force history dynamically
  server.on("/get_history", []() {
    server.send(200, "text/plain", forceHistory);
  });

  // --- Stepper Motor Only Endpoints ---
  server.on("/move10cm_only", []() {
    Serial.println("Web request: Moving 10cm (no measurement)...");
    moveTubeOnly(10.0);
    server.send(200, "text/plain", "OK");
  });

  server.on("/move30cm_only", []() {
    Serial.println("Web request: Moving 30cm (no measurement)...");
    moveTubeOnly(30.0);
    server.send(200, "text/plain", "OK");
  });

  server.on("/move60cm_only", []() {
    Serial.println("Web request: Moving 60cm (no measurement)...");
    moveTubeOnly(60.0);
    server.send(200, "text/plain", "OK");
  });

  // --- Endpoint for Custom/Preset Stepper Move (used by dropdown) ---
  server.on("/move_custom_cm_only", HTTP_GET, []() {
    if (server.hasArg("distance")) {
      float distance = server.arg("distance").toFloat();
      Serial.print("Web request: Moving ");
      Serial.print(distance);
      Serial.println("cm (custom/preset, no measurement)...");
      moveTubeOnly(distance);
      server.send(200, "text/plain", "OK");
    } else {
      server.send(400, "text/plain", "Missing distance parameter");
    }
  });


  // --- Force Measurement Endpoint ---
  server.on("/read_force", []() {
    Serial.println("Web request: Measuring current force only...");
    sendCurrentForce();
    server.send(200, "text/plain", "OK"); // Send OK, JS will fetch new history
  });

  // Generic Servo Control Endpoint (handles all angles, including 0 for reset)
  server.on("/move_servo", HTTP_GET, []() {
    if (server.hasArg("angle")) {
      int angle = server.arg("angle").toInt();
      // Basic validation to keep servo within safe range (0-180 degrees)
      if (angle >= 0 && angle <= 180) {
        Serial.print("Web request: Moving servo to ");
        Serial.print(angle);
        Serial.println(" degrees...");
        moveServo(angle);
        server.send(200, "text/plain", "OK");
      } else {
        server.send(400, "text/plain", "Invalid angle. Angle must be between 0 and 180.");
      }
    } else {
      server.send(400, "text/plain", "Missing angle parameter");
    }
  });

  // --- System Control Endpoints ---
  server.on("/reset_force_data", []() {
    forceHistory = "";
    readingCounter = 0;
    Serial.println("Force data reset.");
    server.send(200, "text/plain", "OK");
  });

  server.on("/reset", []() {
    server.send(200, "text/html", "<h3>Resetting Wi-Fi and rebooting...</h3>");
    delay(1000);
    WiFi.disconnect(true, true);
    ESP.restart();
  });

  server.begin();
  Serial.println("📡 Web server started.");
}

void loop() {
  server.handleClient();

  // Handle physical reset button
  if (digitalRead(RESET_BUTTON_PIN) == LOW) {
    if (!buttonPressed) {
      buttonPressed = true;
      buttonPressTime = millis();
      Serial.println("Reset button pressed. Hold for 3 seconds for factory reset...");
    } else if (millis() - buttonPressTime > 3000) {
      Serial.println("Long press detected — Performing factory reset...");
      WiFiManager wm;
      wm.resetSettings();
      delay(500);
      ESP.restart();
    }
  } else {
    buttonPressed = false;
  }
}